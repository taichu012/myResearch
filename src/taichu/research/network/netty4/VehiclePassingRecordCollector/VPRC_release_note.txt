++++++++++++++++
Release Notes:
Author：taichu
++++++++++++++++


Ed0.0.1（2016-07-15）-（2016-07-15）
----------------------------
REQ0001:从taichu.research总的release notes中独立出来；
REQ0002：实现了基于netty框架的基本的client/server收发消息，心跳和超时，及自定义handler
REQ0003:尝试调整handler的次序来优化；
REQ0004：实现main启动client/server实例
REQ0005:增加了httpclient,httpserver的实现代码；
REQ0006:根据逻辑，还是将超时心跳handler放在前面，并重新检查了msg级联传递和引用减数；





++++++++++++++++
优化策略: 
++++++++++++++++
1.【CLOSED】考虑到心跳包一般是发生在非高频主业务情况下，所以超时心跳的handler应该放在之后，而先让高频的主业务handler处理。
       从7800CAPS提升到8200CAPS（2核CPU），相对提升值5%，具有一定意义。
2.【OPEN】调整windows的selector等系统参数（参考网文）
3.【OPEN】研究如何调整收发的buffer，降低ctx切换次数，一次收发一批数据（是否netty自动控制？）
4.【OPEN】client多线程攻击server，server多线程多队列处理；
5.【OPEN】如何保持住bytebuf，retain方法？
6.【CLOSED】鲁大师的影响：
问题表现：不知为何，性能从早上820CAPS下降为5300CAPS了，在整理了几个class类的代码之后，也许是硬件发热的原因吧。
问题分析：关闭鲁大师后，发现CPU从原来不超过1.6GHZ（约66%利用率），恢复到可以飙升至2.35GHZ（95%），程序马上从5K升到了8KCAPS.
结论：以后要关注CPU的利用率的飙升和程序的关系，也要关心问题，也需要酌情关闭保护硬件的类似鲁大师的软件，它们能限制CPU的温度和速度！
7.【GOING】netty几种unpool内存的情况说明，请查源码中“io.netty.buffer.Unpooled”，eclipse中鼠标悬停Unpooled上F2可查说明；
		http://blog.csdn.net/jiangguilong2000/article/details/39501541
		http://www.open-open.com/news/view/dc4255
		http://m.blog.csdn.net/article/details?id=51259405
		http://www.tuicool.com/articles/FFb6Zr


++++++++++++++++
TODOLIST: 
++++++++++++++++

1.【GOING】继续研究netty框架
1a. 【LINK】官网：http://netty.io/wiki/user-guide-for-4.x.html

1b.	【OPEN】server保存client的channel待用的举例，精！
	http://m.blog.csdn.net/article/details?id=49073557

1c.	【GOING】若干NETTY的topic研究                        
	
    netty怎么插入自己的编辑吗codec handler
    Netty系列之Netty百万级推送服务设计要点（http://www.cnblogs.com/zhuawang/p/4204366.html）
    netty异步NIO的udp数据包启动配置DatagramChannel参数（http://blog.163.com/linfenliang@126/blog/static/12785719520121074486487/）
    netty如果增加server和client的处理线程数？控制线程数？（现在从jvisualvm或jconsole中看到client，server的BACKLOG并不起作用）
          【CLOSED】netty尝试编解码http/url信令 http://www.cnblogs.com/luxiaoxun/p/3959450.html
            基于netty4的TCP短连接测试  http://blog.163.com/linfenliang@126/blog/static/1278571952013721101340165/
    
2. 【OPEN】看是否借鉴以前的unioss的一些控制？比如结束，SSL，stringSocket等？
3。【OPEN】SMP协议，或心跳协议被高频攻击的话，怎么处理？
4. 【OPEN】将SMP改为不同子协议，将HB心跳层分开，paylord层改为原来模式，以及新增（<8位MD5>+<json>)格式，
                             那么为配合新增的JSON模式而需要专门的handler或codec来处理；届时需要同时考虑不同handler的位置和调整代码！！！
                             届时可能先不解析JSON而直接传给KAFKA，然后在kafka consumer中取给spark的时候再调用SMP进行JSON解析 



	  
	  
	  