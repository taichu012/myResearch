++++++++++++++++
Release Notes:
Author：taichu
++++++++++++++++


Ed0.0.1（2016-06-29）
----------------------------
REQ0001:实现基本的producer功能；
REQ0002：实现producer线程化；
REQ0003:实现基本的consumer功能和线程化；
REQ0004：实现demo功能，可以启动1个producer线程和1个consumer线程；
REQ0005:实现INI配置文件的读取；
REQ0006：实现通过运行脚本来以进程形式启动zookeeper和kafka2个服务器；
REQ0007:增加了consumer连续K次收不到msg就退出线程的机制；
REQ0008:增加了shutdown的hook钩子到exit处理线程，且将处理函数接口化；
REQ0009：增加了MyKafkaDemo的控制台输入接收处理，任何输入将触发demo程序结束，并通过钩子妥善处理进程和线程善后工作；
REQ0010：将源码放在远端git仓库维护（https://git.oschina.net/taichu/MyKafka.git）；
REQ0011：综合前面开发内容，实现了MyKafkaDemo启动2个进程和2个现场来演示kafka平台的消息收发，并且
实现了console输入任何内容（比如ENTER回车）就结束程序，通过钩子勾到shutdown消息，妥善关闭2个进程和2个现场，
但2个进程是独立的2个cmd窗口，还需手动关闭（推荐在WIN7的任务管理器中对2个cmd进程“结束进程树”而不是“结束进程”，
这样会级联的关闭cmd启动的java子进程！如果发现java子进程上未关闭，可在任务管理器中关闭它们（jconsole中可以看到java进程号）
REQ0012：增加了对log4j的支持，输出多个log文件到根目录
BUG0013:修复了inireader多个调用者用不同inifilename调用的冲突问题；
REQ0014：实现对github的源码推送，实现一个本地项目修改并推送到2个远端的git仓库（纯eclipse配置）
https://github.com/taichu012/MyKafka.git
https://git.oschina.net/taichu/MyKafka.git
REQ0015：变更git仓库地址为如下：
https://github.com/taichu012/MyResearch.git
https://git.oschina.net/taichu/MyResearch.git
REQ0016:实现了基本的netty收发程序；实现了行结束符的添加和分包（frame）处理；
REQ0017:修正了netty的lineBasedMessageDecoder不支持\r作为行结束符的bug；
REQ0018：实现了基本的过车记录消息收发的测试项目及框架（方便以后扩展为实际项目）







++++++++++++++++
TODOLIST: 
++++++++++++++++

1.【CLOSED】开发：implement consumer;
2.【CLOSED】开发：setup log4j(console output and log file output) 
3.【CLOSED】开发：setup command line start mode (as producer ONLY,consumer ONLY, both,...) 
4.【CLOSED】源码：放入GITHUB或oschina的开源地方
5.【OPEN】IDE：增加对maven/NEXUS的支持，增加pom.xml并增加版本号到配置；
6.【GOING】开发：计划实现对socket/TCP（UDP看情况）端口的多线程支持，接受数据到producer并存入kafka，使用concurrent线程和Executors类;
			http://www.cnblogs.com/fbsk/archive/2012/02/03/2336689.html 
7.【CLOSED】测试：用jmeter来发送message给producer，做压力测试
8.【OPEN】开发：实现URL接口（非传统socket/TCP/UDP接口）接受数据给producer存入kafka(开发tomcat的webapp吗?或其他形式)
9.【OPEN】开发：开发高层次的作业协议，协调consumer和producer的消息收发，监控topic变化，offset变化等；基于kafka，高于kafka; 
10.【OPEN】开发：尝试用生物调控因子来动态的处理producer和consumer的数量（是否需要用到pool开源库？）
11.【CLOSED】IDE：JAVADOC/API文档嵌入：eclipse中菜单Window到Perferences到java项到installed JRE，选中rt.jar包，单击右边Javadoc Location；
12.【GOING】开发：netty框架比mina新和好，用起来！用netty异步NIO框架+executor的线程池（也许netty自己有线程池！）
	官网：http://netty.io/wiki/user-guide-for-4.x.html
	[tested]netty入门实例【极好！】（http://www.cnblogs.com/zhuawang/p/3849742.html）
	[tested]netty举例【2013年，举例非常旧！】（http://lippeng.iteye.com/blog/1907279）
	[tested]netty中的粘包和分包【极好】：http://m.blog.csdn.net/article/details?id=41122501
	netty框架下server收着N个client，并可能主动发给client信息（一边server是被动接受client，而不是主动发信息给client）
	http://m.blog.csdn.net/article/details?id=49073557
	
    netty怎么插入自己的编辑吗codec handler
    netty怎么控制client没有妥善关闭socket，没有结束符号的超时处理？
    Netty系列之Netty百万级推送服务设计要点（http://www.cnblogs.com/zhuawang/p/4204366.html）
    netty异步NIO的udp数据包启动配置DatagramChannel参数（http://blog.163.com/linfenliang@126/blog/static/12785719520121074486487/）
    netty如果增加server和client的处理线程数？控制线程数？（现在从jvisualvm或jconsole中看到client，server的BACKLOG并不起作用）
    netty尝试编解码http/url信令
    netty的超时timeout处理
    
13.【OPEN】看是否借鉴以前的unioss的一些控制？比如结束，SSL，stringSocket等？
14.【CLOSED】IDE：jdk的class带着源码，可以直接查看；
15.【CLOSED】IDE：查看第三方lib库的源码（点击类触发找不到class后，可选择带source的jar包）和javadoc（在build中lib中选择某个点开添加source和javadoc）
16.【OPEN】开发：kafka应该考虑支持linux（虽然是java屏蔽了大部分os差异，但是一般server运行在linux，换行回车，路径斜杠，等还是要仔细考虑
17.【OPEN】开发：kafka集群的多台host（多个partition，多个producer，多个consumer等）的实践；
18.【CLOSED】测试：对topic下message的收，发作统计，来核对数目；
19.【CLOSED】修改项目名字为myresearch，但是因为github无法修改projectname（git.oschina.net可以）所以另建项目。






++++++++++++++++
Hints
++++++++++++++++

H0001 处理报错：Exception in thread "main" java.lang.NoClassDefFoundError: org/apache/log4j/Level
                 说明： 缺少包：slf4j-api-1.5.2.jar，slf4j-log4j12-1.5.2.jar，log4j-1.2.17.jar
                             它们 都在kafka安装目录的libs中，拷贝到工程，应用为build编译所需类库文件；
                             然后 在class类文件开头引入包“import org.apache.log4j.*; 
                             在 class类文件的类定义中加入“private static Logger log =Logger.getLogger("MyClass.class");”
                             
H0002 中文乱码问题（TODO）：
	1.WIN7默认的cmd（命令行窗口）是GBK编码（2字节），不是utf-8（3字节）；
	2.在cmd中可以用命令“chcp”来切换：
		chcp 65001  就是换成UTF-8代码页
		chcp 936 可以换回默认的GBK
		chcp 437 是美国英语
	3.一般来说eclipse默认页码是GBK，可在“window--preferences--general--workspace”设定为utf-8
	4.在cmd中启动zookeeper和kafka后，再启动1个producer和1个consumer，因为都是GBK，所以消息为“中文”，都能看到；但是producer的CMD
	  窗体输入中文后，在IDE/eclipse中的console输出的时候看到“？？？”问号；待研究TODO；
	5.eclipse的源码source编码格式一般继承OS，比如继承WIN7的默认GBK，但可以转换显示。问题是如果java文件是GBK，txt文件是utf-8，转换为
	 任何一种，其他就看不到了。而且转换显示，并非“实际转换文件！”，所以可以安装插件“com.lifesting.tool.encoding_1.0.0.jar”，
	 就能在eclipse中实现转换规则设定，包括文件实际转换！
	  
H0003 关于网络IO堵塞
	//socket.accept线程会因为client没有发送换行回车而阻塞；
	//也会因为最后没有获得约定的结束标记而永远阻塞；
	//如果为socket设定了accept的timeout，则会收到SocketTimeoutException而供你处置，
	//如果你不主动结束socket，即使抛出超时异常，socket依然阻塞！
	//windows下是先回车后换行（\r\n，或13,10，在jmeter里面可以设定E0L），MAC OS是换行\r，Linux是回车\n
	//工具jmeter的tcpsample默认一行之后会自动添加回车换行符，便于对端socket的readline捕获回车或换行
	//但是因为阻塞网络IO没有协商结束标记，所以只要TCP socket开着，而网络无字节/字符流量，就一直在read阻塞
	//所以必须协商结束符比如"<EOF>"等作为flag。
	
	//对于非阻塞式的NIO，再研究！可以直接上框架netty
	
H0004 eclipse的快速格式化format快捷键是ctrl+shift+f，但经常和输入法冲突，当你关闭输入法才可以让这个快捷方式奇效！

H0005 类型后面三个点(String...)，是从Java 5开始，Java语言对方法参数支持一种新写法，叫可变长度参数列表;
      http://bbs.51cto.com/thread-1012690-1.html
      
      比如netty中的如下语句
          public DelimiterBasedFrameDecoder(int maxFrameLength, ByteBuf... delimiters) {
        this(maxFrameLength, true, delimiters);
    }
    
H0006: java不允许只有返回值不同（函数名和参数表都一样）的成员函数存在！
	  
	  
	  